package {{.Domain}}

import (
	"github.com/pkg/errors"
	"{{.Module}}/internal/{{.Domain}}/infrastructure"
	"{{.Module}}/internal/{{.Domain}}/model"
)

type Service interface {
	Create{{.DomainTitle}}(req *model.Create{{.DomainTitle}}Req) (*model.{{.DomainTitle}},error)
	Delete{{.DomainTitle}}(id int) error
	Update{{.DomainTitle}}(id int, req *model.Update{{.DomainTitle}}Req) error
}

type service struct {
	repo    infrastructure.{{.DomainTitle}}Repository
	cache 	infrastructure.{{.DomainTitle}}Cache
}

func NewService(repo infrastructure.{{.DomainTitle}}Repository, cache infrastructure.{{.DomainTitle}}Cache) Service {
	return &service{repo: repo, cache: cache}
}

func (s *service) Create{{.DomainTitle}}(req *model.Create{{.DomainTitle}}Req) (*model.{{.DomainTitle}},error)  {
	{{.Domain}},err := s.repo.Create{{.DomainTitle}}(req)
	if err != nil {
		return nil,errors.WithStack(err)
	}
	return {{.Domain}},nil
}

func (s *service) Delete{{.DomainTitle}}(id int) error {
	if err := s.repo.Delete{{.DomainTitle}}(id); err != nil {
		return errors.WithStack(err)
	}
	return nil
}

func (s *service) Update{{.DomainTitle}}(id int, req *model.Update{{.DomainTitle}}Req) error {
	if err := s.repo.Update{{.DomainTitle}}(id, req); err != nil {
		return errors.WithStack(err)
	}
	return nil
}
