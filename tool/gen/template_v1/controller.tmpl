package {{.Domain}}

import (
	"github.com/gin-gonic/gin"
	"{{.Module}}/internal/common/server/response"
	"{{.Module}}/internal/common/utils"
	"{{.Module}}/internal/{{.Domain}}/model"
)


type Controller struct {
	server Service
}

func NewController(svc Service) *Controller {
	return &Controller{
		server: svc,
	}
}

func (c *Controller) Create{{.DomainTitle}}(ctx *gin.Context) {
	req := new(model.Create{{.DomainTitle}}Req)

	if err := ctx.ShouldBindJSON(req); err != nil {
		response.ErrorParameterInvalid(ctx, err)
		return
	}

	{{.Domain}},err := c.server.Create{{.DomainTitle}}(req)
	if err != nil {
		response.Error(ctx, err)
		return
	}

	response.Success(ctx,{{.Domain}})
}

func (c *Controller) Delete{{.DomainTitle}}(ctx *gin.Context) {
	id, err := utils.GetID(ctx)
	if err != nil {
		response.ErrorParameterInvalid(ctx, err)
		return
	}
	if err := c.server.Delete{{.DomainTitle}}(id); err != nil {
		response.Error(ctx, err)
		return
	}

	response.Success(ctx)
}

func (c *Controller) Update{{.DomainTitle}}(ctx *gin.Context) {
	id, err := utils.GetID(ctx)
	if err != nil {
		response.ErrorParameterInvalid(ctx, err)
		return
	}

	req := new(model.Update{{.DomainTitle}}Req)

	if err = ctx.ShouldBindJSON(req); err != nil {
		response.ErrorParameterInvalid(ctx, err)
		return
	}

	if err := c.server.Update{{.DomainTitle}}(id, req); err != nil {
		response.Error(ctx, err)
		return
	}

	response.Success(ctx)
}
