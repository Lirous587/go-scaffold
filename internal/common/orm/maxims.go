// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// Maxim is an object representing the database table.
type Maxim struct {
	ID        int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	Content   string      `boil:"content" json:"content" toml:"content" yaml:"content"`
	Author    null.String `boil:"author" json:"author,omitempty" toml:"author" yaml:"author,omitempty"`
	Note      null.String `boil:"note" json:"note,omitempty" toml:"note" yaml:"note,omitempty"`
	AvatarURL string      `boil:"avatar_url" json:"avatar_url" toml:"avatar_url" yaml:"avatar_url"`

	R *maximR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L maximL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MaximColumns = struct {
	ID        string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
	Content   string
	Author    string
	Note      string
	AvatarURL string
}{
	ID:        "id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	DeletedAt: "deleted_at",
	Content:   "content",
	Author:    "author",
	Note:      "note",
	AvatarURL: "avatar_url",
}

var MaximTableColumns = struct {
	ID        string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
	Content   string
	Author    string
	Note      string
	AvatarURL string
}{
	ID:        "maxims.id",
	CreatedAt: "maxims.created_at",
	UpdatedAt: "maxims.updated_at",
	DeletedAt: "maxims.deleted_at",
	Content:   "maxims.content",
	Author:    "maxims.author",
	Note:      "maxims.note",
	AvatarURL: "maxims.avatar_url",
}

// Generated where

var MaximWhere = struct {
	ID        whereHelperint64
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
	DeletedAt whereHelpernull_Time
	Content   whereHelperstring
	Author    whereHelpernull_String
	Note      whereHelpernull_String
	AvatarURL whereHelperstring
}{
	ID:        whereHelperint64{field: "\"maxims\".\"id\""},
	CreatedAt: whereHelpertime_Time{field: "\"maxims\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"maxims\".\"updated_at\""},
	DeletedAt: whereHelpernull_Time{field: "\"maxims\".\"deleted_at\""},
	Content:   whereHelperstring{field: "\"maxims\".\"content\""},
	Author:    whereHelpernull_String{field: "\"maxims\".\"author\""},
	Note:      whereHelpernull_String{field: "\"maxims\".\"note\""},
	AvatarURL: whereHelperstring{field: "\"maxims\".\"avatar_url\""},
}

// MaximRels is where relationship names are stored.
var MaximRels = struct {
}{}

// maximR is where relationships are stored.
type maximR struct {
}

// NewStruct creates a new relationship struct
func (*maximR) NewStruct() *maximR {
	return &maximR{}
}

// maximL is where Load methods for each relationship are stored.
type maximL struct{}

var (
	maximAllColumns            = []string{"id", "created_at", "updated_at", "deleted_at", "content", "author", "note", "avatar_url"}
	maximColumnsWithoutDefault = []string{"content", "avatar_url"}
	maximColumnsWithDefault    = []string{"id", "created_at", "updated_at", "deleted_at", "author", "note"}
	maximPrimaryKeyColumns     = []string{"id"}
	maximGeneratedColumns      = []string{}
)

type (
	// MaximSlice is an alias for a slice of pointers to Maxim.
	// This should almost always be used instead of []Maxim.
	MaximSlice []*Maxim
	// MaximHook is the signature for custom Maxim hook methods
	MaximHook func(boil.Executor, *Maxim) error

	maximQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	maximType                 = reflect.TypeOf(&Maxim{})
	maximMapping              = queries.MakeStructMapping(maximType)
	maximPrimaryKeyMapping, _ = queries.BindMapping(maximType, maximMapping, maximPrimaryKeyColumns)
	maximInsertCacheMut       sync.RWMutex
	maximInsertCache          = make(map[string]insertCache)
	maximUpdateCacheMut       sync.RWMutex
	maximUpdateCache          = make(map[string]updateCache)
	maximUpsertCacheMut       sync.RWMutex
	maximUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var maximAfterSelectMu sync.Mutex
var maximAfterSelectHooks []MaximHook

var maximBeforeInsertMu sync.Mutex
var maximBeforeInsertHooks []MaximHook
var maximAfterInsertMu sync.Mutex
var maximAfterInsertHooks []MaximHook

var maximBeforeUpdateMu sync.Mutex
var maximBeforeUpdateHooks []MaximHook
var maximAfterUpdateMu sync.Mutex
var maximAfterUpdateHooks []MaximHook

var maximBeforeDeleteMu sync.Mutex
var maximBeforeDeleteHooks []MaximHook
var maximAfterDeleteMu sync.Mutex
var maximAfterDeleteHooks []MaximHook

var maximBeforeUpsertMu sync.Mutex
var maximBeforeUpsertHooks []MaximHook
var maximAfterUpsertMu sync.Mutex
var maximAfterUpsertHooks []MaximHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Maxim) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range maximAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Maxim) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range maximBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Maxim) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range maximAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Maxim) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range maximBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Maxim) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range maximAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Maxim) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range maximBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Maxim) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range maximAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Maxim) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range maximBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Maxim) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range maximAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMaximHook registers your hook function for all future operations.
func AddMaximHook(hookPoint boil.HookPoint, maximHook MaximHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		maximAfterSelectMu.Lock()
		maximAfterSelectHooks = append(maximAfterSelectHooks, maximHook)
		maximAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		maximBeforeInsertMu.Lock()
		maximBeforeInsertHooks = append(maximBeforeInsertHooks, maximHook)
		maximBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		maximAfterInsertMu.Lock()
		maximAfterInsertHooks = append(maximAfterInsertHooks, maximHook)
		maximAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		maximBeforeUpdateMu.Lock()
		maximBeforeUpdateHooks = append(maximBeforeUpdateHooks, maximHook)
		maximBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		maximAfterUpdateMu.Lock()
		maximAfterUpdateHooks = append(maximAfterUpdateHooks, maximHook)
		maximAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		maximBeforeDeleteMu.Lock()
		maximBeforeDeleteHooks = append(maximBeforeDeleteHooks, maximHook)
		maximBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		maximAfterDeleteMu.Lock()
		maximAfterDeleteHooks = append(maximAfterDeleteHooks, maximHook)
		maximAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		maximBeforeUpsertMu.Lock()
		maximBeforeUpsertHooks = append(maximBeforeUpsertHooks, maximHook)
		maximBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		maximAfterUpsertMu.Lock()
		maximAfterUpsertHooks = append(maximAfterUpsertHooks, maximHook)
		maximAfterUpsertMu.Unlock()
	}
}

// OneG returns a single maxim record from the query using the global executor.
func (q maximQuery) OneG() (*Maxim, error) {
	return q.One(boil.GetDB())
}

// One returns a single maxim record from the query.
func (q maximQuery) One(exec boil.Executor) (*Maxim, error) {
	o := &Maxim{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: failed to execute a one query for maxims")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Maxim records from the query using the global executor.
func (q maximQuery) AllG() (MaximSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all Maxim records from the query.
func (q maximQuery) All(exec boil.Executor) (MaximSlice, error) {
	var o []*Maxim

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to Maxim slice")
	}

	if len(maximAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Maxim records in the query using the global executor
func (q maximQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all Maxim records in the query.
func (q maximQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count maxims rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q maximQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q maximQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if maxims exists")
	}

	return count > 0, nil
}

// Maxims retrieves all the records using an executor.
func Maxims(mods ...qm.QueryMod) maximQuery {
	mods = append(mods, qm.From("\"maxims\""), qmhelper.WhereIsNull("\"maxims\".\"deleted_at\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"maxims\".*"})
	}

	return maximQuery{q}
}

// FindMaximG retrieves a single record by ID.
func FindMaximG(iD int64, selectCols ...string) (*Maxim, error) {
	return FindMaxim(boil.GetDB(), iD, selectCols...)
}

// FindMaxim retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMaxim(exec boil.Executor, iD int64, selectCols ...string) (*Maxim, error) {
	maximObj := &Maxim{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"maxims\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, maximObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: unable to select from maxims")
	}

	if err = maximObj.doAfterSelectHooks(exec); err != nil {
		return maximObj, err
	}

	return maximObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Maxim) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Maxim) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no maxims provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(maximColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	maximInsertCacheMut.RLock()
	cache, cached := maximInsertCache[key]
	maximInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			maximAllColumns,
			maximColumnsWithDefault,
			maximColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(maximType, maximMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(maximType, maximMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"maxims\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"maxims\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into maxims")
	}

	if !cached {
		maximInsertCacheMut.Lock()
		maximInsertCache[key] = cache
		maximInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Maxim record using the global executor.
// See Update for more documentation.
func (o *Maxim) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the Maxim.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Maxim) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	maximUpdateCacheMut.RLock()
	cache, cached := maximUpdateCache[key]
	maximUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			maximAllColumns,
			maximPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update maxims, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"maxims\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, maximPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(maximType, maximMapping, append(wl, maximPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update maxims row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for maxims")
	}

	if !cached {
		maximUpdateCacheMut.Lock()
		maximUpdateCache[key] = cache
		maximUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q maximQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q maximQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for maxims")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for maxims")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o MaximSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MaximSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), maximPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"maxims\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, maximPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in maxim slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all maxim")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Maxim) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Maxim) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("orm: no maxims provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(maximColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	maximUpsertCacheMut.RLock()
	cache, cached := maximUpsertCache[key]
	maximUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			maximAllColumns,
			maximColumnsWithDefault,
			maximColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			maximAllColumns,
			maximPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert maxims, could not build update column list")
		}

		ret := strmangle.SetComplement(maximAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(maximPrimaryKeyColumns) == 0 {
				return errors.New("orm: unable to upsert maxims, could not build conflict column list")
			}

			conflict = make([]string, len(maximPrimaryKeyColumns))
			copy(conflict, maximPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"maxims\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(maximType, maximMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(maximType, maximMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert maxims")
	}

	if !cached {
		maximUpsertCacheMut.Lock()
		maximUpsertCache[key] = cache
		maximUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single Maxim record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Maxim) DeleteG(hardDelete bool) (int64, error) {
	return o.Delete(boil.GetDB(), hardDelete)
}

// Delete deletes a single Maxim record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Maxim) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no Maxim provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), maximPrimaryKeyMapping)
		sql = "DELETE FROM \"maxims\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"maxims\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(maximType, maximMapping, append(wl, maximPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from maxims")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for maxims")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q maximQuery) DeleteAllG(hardDelete bool) (int64, error) {
	return q.DeleteAll(boil.GetDB(), hardDelete)
}

// DeleteAll deletes all matching rows.
func (q maximQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no maximQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from maxims")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for maxims")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o MaximSlice) DeleteAllG(hardDelete bool) (int64, error) {
	return o.DeleteAll(boil.GetDB(), hardDelete)
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MaximSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(maximBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), maximPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"maxims\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, maximPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), maximPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"maxims\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, maximPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from maxim slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for maxims")
	}

	if len(maximAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Maxim) ReloadG() error {
	if o == nil {
		return errors.New("orm: no Maxim provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Maxim) Reload(exec boil.Executor) error {
	ret, err := FindMaxim(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MaximSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("orm: empty MaximSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MaximSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MaximSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), maximPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"maxims\".* FROM \"maxims\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, maximPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in MaximSlice")
	}

	*o = slice

	return nil
}

// MaximExistsG checks if the Maxim row exists.
func MaximExistsG(iD int64) (bool, error) {
	return MaximExists(boil.GetDB(), iD)
}

// MaximExists checks if the Maxim row exists.
func MaximExists(exec boil.Executor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"maxims\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if maxims exists")
	}

	return exists, nil
}

// Exists checks if the Maxim row exists.
func (o *Maxim) Exists(exec boil.Executor) (bool, error) {
	return MaximExists(exec, o.ID)
}
