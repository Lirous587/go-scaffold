// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// Friendlink is an object representing the database table.
type Friendlink struct {
	ID          int64            `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt   time.Time        `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt   time.Time        `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	Description string           `boil:"description" json:"description" toml:"description" yaml:"description"`
	SiteName    string           `boil:"site_name" json:"site_name" toml:"site_name" yaml:"site_name"`
	URL         string           `boil:"url" json:"url" toml:"url" yaml:"url"`
	Logo        string           `boil:"logo" json:"logo" toml:"logo" yaml:"logo"`
	Status      FriendlinkStatus `boil:"status" json:"status" toml:"status" yaml:"status"`
	Email       string           `boil:"email" json:"email" toml:"email" yaml:"email"`

	R *friendlinkR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L friendlinkL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FriendlinkColumns = struct {
	ID          string
	CreatedAt   string
	UpdatedAt   string
	Description string
	SiteName    string
	URL         string
	Logo        string
	Status      string
	Email       string
}{
	ID:          "id",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
	Description: "description",
	SiteName:    "site_name",
	URL:         "url",
	Logo:        "logo",
	Status:      "status",
	Email:       "email",
}

var FriendlinkTableColumns = struct {
	ID          string
	CreatedAt   string
	UpdatedAt   string
	Description string
	SiteName    string
	URL         string
	Logo        string
	Status      string
	Email       string
}{
	ID:          "friendlinks.id",
	CreatedAt:   "friendlinks.created_at",
	UpdatedAt:   "friendlinks.updated_at",
	Description: "friendlinks.description",
	SiteName:    "friendlinks.site_name",
	URL:         "friendlinks.url",
	Logo:        "friendlinks.logo",
	Status:      "friendlinks.status",
	Email:       "friendlinks.email",
}

// Generated where

type whereHelperFriendlinkStatus struct{ field string }

func (w whereHelperFriendlinkStatus) EQ(x FriendlinkStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperFriendlinkStatus) NEQ(x FriendlinkStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperFriendlinkStatus) LT(x FriendlinkStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperFriendlinkStatus) LTE(x FriendlinkStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperFriendlinkStatus) GT(x FriendlinkStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperFriendlinkStatus) GTE(x FriendlinkStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperFriendlinkStatus) IN(slice []FriendlinkStatus) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperFriendlinkStatus) NIN(slice []FriendlinkStatus) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var FriendlinkWhere = struct {
	ID          whereHelperint64
	CreatedAt   whereHelpertime_Time
	UpdatedAt   whereHelpertime_Time
	Description whereHelperstring
	SiteName    whereHelperstring
	URL         whereHelperstring
	Logo        whereHelperstring
	Status      whereHelperFriendlinkStatus
	Email       whereHelperstring
}{
	ID:          whereHelperint64{field: "\"friendlinks\".\"id\""},
	CreatedAt:   whereHelpertime_Time{field: "\"friendlinks\".\"created_at\""},
	UpdatedAt:   whereHelpertime_Time{field: "\"friendlinks\".\"updated_at\""},
	Description: whereHelperstring{field: "\"friendlinks\".\"description\""},
	SiteName:    whereHelperstring{field: "\"friendlinks\".\"site_name\""},
	URL:         whereHelperstring{field: "\"friendlinks\".\"url\""},
	Logo:        whereHelperstring{field: "\"friendlinks\".\"logo\""},
	Status:      whereHelperFriendlinkStatus{field: "\"friendlinks\".\"status\""},
	Email:       whereHelperstring{field: "\"friendlinks\".\"email\""},
}

// FriendlinkRels is where relationship names are stored.
var FriendlinkRels = struct {
}{}

// friendlinkR is where relationships are stored.
type friendlinkR struct {
}

// NewStruct creates a new relationship struct
func (*friendlinkR) NewStruct() *friendlinkR {
	return &friendlinkR{}
}

// friendlinkL is where Load methods for each relationship are stored.
type friendlinkL struct{}

var (
	friendlinkAllColumns            = []string{"id", "created_at", "updated_at", "description", "site_name", "url", "logo", "status", "email"}
	friendlinkColumnsWithoutDefault = []string{"description", "site_name", "url", "logo", "email"}
	friendlinkColumnsWithDefault    = []string{"id", "created_at", "updated_at", "status"}
	friendlinkPrimaryKeyColumns     = []string{"id"}
	friendlinkGeneratedColumns      = []string{}
)

type (
	// FriendlinkSlice is an alias for a slice of pointers to Friendlink.
	// This should almost always be used instead of []Friendlink.
	FriendlinkSlice []*Friendlink
	// FriendlinkHook is the signature for custom Friendlink hook methods
	FriendlinkHook func(boil.Executor, *Friendlink) error

	friendlinkQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	friendlinkType                 = reflect.TypeOf(&Friendlink{})
	friendlinkMapping              = queries.MakeStructMapping(friendlinkType)
	friendlinkPrimaryKeyMapping, _ = queries.BindMapping(friendlinkType, friendlinkMapping, friendlinkPrimaryKeyColumns)
	friendlinkInsertCacheMut       sync.RWMutex
	friendlinkInsertCache          = make(map[string]insertCache)
	friendlinkUpdateCacheMut       sync.RWMutex
	friendlinkUpdateCache          = make(map[string]updateCache)
	friendlinkUpsertCacheMut       sync.RWMutex
	friendlinkUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var friendlinkAfterSelectMu sync.Mutex
var friendlinkAfterSelectHooks []FriendlinkHook

var friendlinkBeforeInsertMu sync.Mutex
var friendlinkBeforeInsertHooks []FriendlinkHook
var friendlinkAfterInsertMu sync.Mutex
var friendlinkAfterInsertHooks []FriendlinkHook

var friendlinkBeforeUpdateMu sync.Mutex
var friendlinkBeforeUpdateHooks []FriendlinkHook
var friendlinkAfterUpdateMu sync.Mutex
var friendlinkAfterUpdateHooks []FriendlinkHook

var friendlinkBeforeDeleteMu sync.Mutex
var friendlinkBeforeDeleteHooks []FriendlinkHook
var friendlinkAfterDeleteMu sync.Mutex
var friendlinkAfterDeleteHooks []FriendlinkHook

var friendlinkBeforeUpsertMu sync.Mutex
var friendlinkBeforeUpsertHooks []FriendlinkHook
var friendlinkAfterUpsertMu sync.Mutex
var friendlinkAfterUpsertHooks []FriendlinkHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Friendlink) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range friendlinkAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Friendlink) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range friendlinkBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Friendlink) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range friendlinkAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Friendlink) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range friendlinkBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Friendlink) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range friendlinkAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Friendlink) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range friendlinkBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Friendlink) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range friendlinkAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Friendlink) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range friendlinkBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Friendlink) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range friendlinkAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddFriendlinkHook registers your hook function for all future operations.
func AddFriendlinkHook(hookPoint boil.HookPoint, friendlinkHook FriendlinkHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		friendlinkAfterSelectMu.Lock()
		friendlinkAfterSelectHooks = append(friendlinkAfterSelectHooks, friendlinkHook)
		friendlinkAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		friendlinkBeforeInsertMu.Lock()
		friendlinkBeforeInsertHooks = append(friendlinkBeforeInsertHooks, friendlinkHook)
		friendlinkBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		friendlinkAfterInsertMu.Lock()
		friendlinkAfterInsertHooks = append(friendlinkAfterInsertHooks, friendlinkHook)
		friendlinkAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		friendlinkBeforeUpdateMu.Lock()
		friendlinkBeforeUpdateHooks = append(friendlinkBeforeUpdateHooks, friendlinkHook)
		friendlinkBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		friendlinkAfterUpdateMu.Lock()
		friendlinkAfterUpdateHooks = append(friendlinkAfterUpdateHooks, friendlinkHook)
		friendlinkAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		friendlinkBeforeDeleteMu.Lock()
		friendlinkBeforeDeleteHooks = append(friendlinkBeforeDeleteHooks, friendlinkHook)
		friendlinkBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		friendlinkAfterDeleteMu.Lock()
		friendlinkAfterDeleteHooks = append(friendlinkAfterDeleteHooks, friendlinkHook)
		friendlinkAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		friendlinkBeforeUpsertMu.Lock()
		friendlinkBeforeUpsertHooks = append(friendlinkBeforeUpsertHooks, friendlinkHook)
		friendlinkBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		friendlinkAfterUpsertMu.Lock()
		friendlinkAfterUpsertHooks = append(friendlinkAfterUpsertHooks, friendlinkHook)
		friendlinkAfterUpsertMu.Unlock()
	}
}

// OneG returns a single friendlink record from the query using the global executor.
func (q friendlinkQuery) OneG() (*Friendlink, error) {
	return q.One(boil.GetDB())
}

// One returns a single friendlink record from the query.
func (q friendlinkQuery) One(exec boil.Executor) (*Friendlink, error) {
	o := &Friendlink{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: failed to execute a one query for friendlinks")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Friendlink records from the query using the global executor.
func (q friendlinkQuery) AllG() (FriendlinkSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all Friendlink records from the query.
func (q friendlinkQuery) All(exec boil.Executor) (FriendlinkSlice, error) {
	var o []*Friendlink

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to Friendlink slice")
	}

	if len(friendlinkAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Friendlink records in the query using the global executor
func (q friendlinkQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all Friendlink records in the query.
func (q friendlinkQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count friendlinks rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q friendlinkQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q friendlinkQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if friendlinks exists")
	}

	return count > 0, nil
}

// Friendlinks retrieves all the records using an executor.
func Friendlinks(mods ...qm.QueryMod) friendlinkQuery {
	mods = append(mods, qm.From("\"friendlinks\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"friendlinks\".*"})
	}

	return friendlinkQuery{q}
}

// FindFriendlinkG retrieves a single record by ID.
func FindFriendlinkG(iD int64, selectCols ...string) (*Friendlink, error) {
	return FindFriendlink(boil.GetDB(), iD, selectCols...)
}

// FindFriendlink retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFriendlink(exec boil.Executor, iD int64, selectCols ...string) (*Friendlink, error) {
	friendlinkObj := &Friendlink{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"friendlinks\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, friendlinkObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: unable to select from friendlinks")
	}

	if err = friendlinkObj.doAfterSelectHooks(exec); err != nil {
		return friendlinkObj, err
	}

	return friendlinkObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Friendlink) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Friendlink) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no friendlinks provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(friendlinkColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	friendlinkInsertCacheMut.RLock()
	cache, cached := friendlinkInsertCache[key]
	friendlinkInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			friendlinkAllColumns,
			friendlinkColumnsWithDefault,
			friendlinkColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(friendlinkType, friendlinkMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(friendlinkType, friendlinkMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"friendlinks\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"friendlinks\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into friendlinks")
	}

	if !cached {
		friendlinkInsertCacheMut.Lock()
		friendlinkInsertCache[key] = cache
		friendlinkInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Friendlink record using the global executor.
// See Update for more documentation.
func (o *Friendlink) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the Friendlink.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Friendlink) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	friendlinkUpdateCacheMut.RLock()
	cache, cached := friendlinkUpdateCache[key]
	friendlinkUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			friendlinkAllColumns,
			friendlinkPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update friendlinks, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"friendlinks\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, friendlinkPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(friendlinkType, friendlinkMapping, append(wl, friendlinkPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update friendlinks row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for friendlinks")
	}

	if !cached {
		friendlinkUpdateCacheMut.Lock()
		friendlinkUpdateCache[key] = cache
		friendlinkUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q friendlinkQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q friendlinkQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for friendlinks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for friendlinks")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o FriendlinkSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FriendlinkSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), friendlinkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"friendlinks\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, friendlinkPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in friendlink slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all friendlink")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Friendlink) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Friendlink) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("orm: no friendlinks provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(friendlinkColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	friendlinkUpsertCacheMut.RLock()
	cache, cached := friendlinkUpsertCache[key]
	friendlinkUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			friendlinkAllColumns,
			friendlinkColumnsWithDefault,
			friendlinkColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			friendlinkAllColumns,
			friendlinkPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert friendlinks, could not build update column list")
		}

		ret := strmangle.SetComplement(friendlinkAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(friendlinkPrimaryKeyColumns) == 0 {
				return errors.New("orm: unable to upsert friendlinks, could not build conflict column list")
			}

			conflict = make([]string, len(friendlinkPrimaryKeyColumns))
			copy(conflict, friendlinkPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"friendlinks\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(friendlinkType, friendlinkMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(friendlinkType, friendlinkMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert friendlinks")
	}

	if !cached {
		friendlinkUpsertCacheMut.Lock()
		friendlinkUpsertCache[key] = cache
		friendlinkUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single Friendlink record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Friendlink) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single Friendlink record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Friendlink) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no Friendlink provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), friendlinkPrimaryKeyMapping)
	sql := "DELETE FROM \"friendlinks\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from friendlinks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for friendlinks")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q friendlinkQuery) DeleteAllG() (int64, error) {
	return q.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all matching rows.
func (q friendlinkQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no friendlinkQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from friendlinks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for friendlinks")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o FriendlinkSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FriendlinkSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(friendlinkBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), friendlinkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"friendlinks\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, friendlinkPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from friendlink slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for friendlinks")
	}

	if len(friendlinkAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Friendlink) ReloadG() error {
	if o == nil {
		return errors.New("orm: no Friendlink provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Friendlink) Reload(exec boil.Executor) error {
	ret, err := FindFriendlink(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FriendlinkSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("orm: empty FriendlinkSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FriendlinkSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FriendlinkSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), friendlinkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"friendlinks\".* FROM \"friendlinks\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, friendlinkPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in FriendlinkSlice")
	}

	*o = slice

	return nil
}

// FriendlinkExistsG checks if the Friendlink row exists.
func FriendlinkExistsG(iD int64) (bool, error) {
	return FriendlinkExists(boil.GetDB(), iD)
}

// FriendlinkExists checks if the Friendlink row exists.
func FriendlinkExists(exec boil.Executor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"friendlinks\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if friendlinks exists")
	}

	return exists, nil
}

// Exists checks if the Friendlink row exists.
func (o *Friendlink) Exists(exec boil.Executor) (bool, error) {
	return FriendlinkExists(exec, o.ID)
}
