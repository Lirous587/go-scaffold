// Code generated by SQLBoiler 4.19.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Permisision is an object representing the database table.
type Permisision struct {
	ID          int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt   time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	URL         string      `boil:"url" json:"url" toml:"url" yaml:"url"`
	Method      string      `boil:"method" json:"method" toml:"method" yaml:"method"`
	Name        string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Description null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`

	R *permisisionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L permisisionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PermisisionColumns = struct {
	ID          string
	CreatedAt   string
	URL         string
	Method      string
	Name        string
	Description string
}{
	ID:          "id",
	CreatedAt:   "created_at",
	URL:         "url",
	Method:      "method",
	Name:        "name",
	Description: "description",
}

var PermisisionTableColumns = struct {
	ID          string
	CreatedAt   string
	URL         string
	Method      string
	Name        string
	Description string
}{
	ID:          "permisisions.id",
	CreatedAt:   "permisisions.created_at",
	URL:         "permisisions.url",
	Method:      "permisisions.method",
	Name:        "permisisions.name",
	Description: "permisisions.description",
}

// Generated where

var PermisisionWhere = struct {
	ID          whereHelperint
	CreatedAt   whereHelpertime_Time
	URL         whereHelperstring
	Method      whereHelperstring
	Name        whereHelperstring
	Description whereHelpernull_String
}{
	ID:          whereHelperint{field: "\"permisisions\".\"id\""},
	CreatedAt:   whereHelpertime_Time{field: "\"permisisions\".\"created_at\""},
	URL:         whereHelperstring{field: "\"permisisions\".\"url\""},
	Method:      whereHelperstring{field: "\"permisisions\".\"method\""},
	Name:        whereHelperstring{field: "\"permisisions\".\"name\""},
	Description: whereHelpernull_String{field: "\"permisisions\".\"description\""},
}

// PermisisionRels is where relationship names are stored.
var PermisisionRels = struct {
	Roles string
}{
	Roles: "Roles",
}

// permisisionR is where relationships are stored.
type permisisionR struct {
	Roles RoleSlice `boil:"Roles" json:"Roles" toml:"Roles" yaml:"Roles"`
}

// NewStruct creates a new relationship struct
func (*permisisionR) NewStruct() *permisisionR {
	return &permisisionR{}
}

func (o *Permisision) GetRoles() RoleSlice {
	if o == nil {
		return nil
	}

	return o.R.GetRoles()
}

func (r *permisisionR) GetRoles() RoleSlice {
	if r == nil {
		return nil
	}

	return r.Roles
}

// permisisionL is where Load methods for each relationship are stored.
type permisisionL struct{}

var (
	permisisionAllColumns            = []string{"id", "created_at", "url", "method", "name", "description"}
	permisisionColumnsWithoutDefault = []string{"url", "method", "name"}
	permisisionColumnsWithDefault    = []string{"id", "created_at", "description"}
	permisisionPrimaryKeyColumns     = []string{"id"}
	permisisionGeneratedColumns      = []string{}
)

type (
	// PermisisionSlice is an alias for a slice of pointers to Permisision.
	// This should almost always be used instead of []Permisision.
	PermisisionSlice []*Permisision
	// PermisisionHook is the signature for custom Permisision hook methods
	PermisisionHook func(context.Context, boil.ContextExecutor, *Permisision) error

	permisisionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	permisisionType                 = reflect.TypeOf(&Permisision{})
	permisisionMapping              = queries.MakeStructMapping(permisisionType)
	permisisionPrimaryKeyMapping, _ = queries.BindMapping(permisisionType, permisisionMapping, permisisionPrimaryKeyColumns)
	permisisionInsertCacheMut       sync.RWMutex
	permisisionInsertCache          = make(map[string]insertCache)
	permisisionUpdateCacheMut       sync.RWMutex
	permisisionUpdateCache          = make(map[string]updateCache)
	permisisionUpsertCacheMut       sync.RWMutex
	permisisionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var permisisionAfterSelectMu sync.Mutex
var permisisionAfterSelectHooks []PermisisionHook

var permisisionBeforeInsertMu sync.Mutex
var permisisionBeforeInsertHooks []PermisisionHook
var permisisionAfterInsertMu sync.Mutex
var permisisionAfterInsertHooks []PermisisionHook

var permisisionBeforeUpdateMu sync.Mutex
var permisisionBeforeUpdateHooks []PermisisionHook
var permisisionAfterUpdateMu sync.Mutex
var permisisionAfterUpdateHooks []PermisisionHook

var permisisionBeforeDeleteMu sync.Mutex
var permisisionBeforeDeleteHooks []PermisisionHook
var permisisionAfterDeleteMu sync.Mutex
var permisisionAfterDeleteHooks []PermisisionHook

var permisisionBeforeUpsertMu sync.Mutex
var permisisionBeforeUpsertHooks []PermisisionHook
var permisisionAfterUpsertMu sync.Mutex
var permisisionAfterUpsertHooks []PermisisionHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Permisision) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range permisisionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Permisision) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range permisisionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Permisision) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range permisisionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Permisision) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range permisisionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Permisision) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range permisisionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Permisision) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range permisisionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Permisision) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range permisisionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Permisision) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range permisisionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Permisision) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range permisisionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPermisisionHook registers your hook function for all future operations.
func AddPermisisionHook(hookPoint boil.HookPoint, permisisionHook PermisisionHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		permisisionAfterSelectMu.Lock()
		permisisionAfterSelectHooks = append(permisisionAfterSelectHooks, permisisionHook)
		permisisionAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		permisisionBeforeInsertMu.Lock()
		permisisionBeforeInsertHooks = append(permisisionBeforeInsertHooks, permisisionHook)
		permisisionBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		permisisionAfterInsertMu.Lock()
		permisisionAfterInsertHooks = append(permisisionAfterInsertHooks, permisisionHook)
		permisisionAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		permisisionBeforeUpdateMu.Lock()
		permisisionBeforeUpdateHooks = append(permisisionBeforeUpdateHooks, permisisionHook)
		permisisionBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		permisisionAfterUpdateMu.Lock()
		permisisionAfterUpdateHooks = append(permisisionAfterUpdateHooks, permisisionHook)
		permisisionAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		permisisionBeforeDeleteMu.Lock()
		permisisionBeforeDeleteHooks = append(permisisionBeforeDeleteHooks, permisisionHook)
		permisisionBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		permisisionAfterDeleteMu.Lock()
		permisisionAfterDeleteHooks = append(permisisionAfterDeleteHooks, permisisionHook)
		permisisionAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		permisisionBeforeUpsertMu.Lock()
		permisisionBeforeUpsertHooks = append(permisisionBeforeUpsertHooks, permisisionHook)
		permisisionBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		permisisionAfterUpsertMu.Lock()
		permisisionAfterUpsertHooks = append(permisisionAfterUpsertHooks, permisisionHook)
		permisisionAfterUpsertMu.Unlock()
	}
}

// One returns a single permisision record from the query.
func (q permisisionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Permisision, error) {
	o := &Permisision{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: failed to execute a one query for permisisions")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Permisision records from the query.
func (q permisisionQuery) All(ctx context.Context, exec boil.ContextExecutor) (PermisisionSlice, error) {
	var o []*Permisision

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to Permisision slice")
	}

	if len(permisisionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Permisision records in the query.
func (q permisisionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count permisisions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q permisisionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if permisisions exists")
	}

	return count > 0, nil
}

// Roles retrieves all the role's Roles with an executor.
func (o *Permisision) Roles(mods ...qm.QueryMod) roleQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"roles_permisssions\" on \"roles\".\"id\" = \"roles_permisssions\".\"role_id\""),
		qm.Where("\"roles_permisssions\".\"permission_id\"=?", o.ID),
	)

	return Roles(queryMods...)
}

// LoadRoles allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (permisisionL) LoadRoles(ctx context.Context, e boil.ContextExecutor, singular bool, maybePermisision interface{}, mods queries.Applicator) error {
	var slice []*Permisision
	var object *Permisision

	if singular {
		var ok bool
		object, ok = maybePermisision.(*Permisision)
		if !ok {
			object = new(Permisision)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePermisision)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePermisision))
			}
		}
	} else {
		s, ok := maybePermisision.(*[]*Permisision)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePermisision)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePermisision))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &permisisionR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &permisisionR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.Select("\"roles\".\"id\", \"roles\".\"created_at\", \"roles\".\"name\", \"roles\".\"description\", \"a\".\"permission_id\""),
		qm.From("\"roles\""),
		qm.InnerJoin("\"roles_permisssions\" as \"a\" on \"roles\".\"id\" = \"a\".\"role_id\""),
		qm.WhereIn("\"a\".\"permission_id\" in ?", argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load roles")
	}

	var resultSlice []*Role

	var localJoinCols []int
	for results.Next() {
		one := new(Role)
		var localJoinCol int

		err = results.Scan(&one.ID, &one.CreatedAt, &one.Name, &one.Description, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for roles")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice roles")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on roles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for roles")
	}

	if len(roleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Roles = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &roleR{}
			}
			foreign.R.PermissionPermisisions = append(foreign.R.PermissionPermisisions, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Roles = append(local.R.Roles, foreign)
				if foreign.R == nil {
					foreign.R = &roleR{}
				}
				foreign.R.PermissionPermisisions = append(foreign.R.PermissionPermisisions, local)
				break
			}
		}
	}

	return nil
}

// AddRoles adds the given related objects to the existing relationships
// of the permisision, optionally inserting them as new records.
// Appends related to o.R.Roles.
// Sets related.R.PermissionPermisisions appropriately.
func (o *Permisision) AddRoles(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Role) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"roles_permisssions\" (\"permission_id\", \"role_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &permisisionR{
			Roles: related,
		}
	} else {
		o.R.Roles = append(o.R.Roles, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &roleR{
				PermissionPermisisions: PermisisionSlice{o},
			}
		} else {
			rel.R.PermissionPermisisions = append(rel.R.PermissionPermisisions, o)
		}
	}
	return nil
}

// SetRoles removes all previously related items of the
// permisision replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.PermissionPermisisions's Roles accordingly.
// Replaces o.R.Roles with related.
// Sets related.R.PermissionPermisisions's Roles accordingly.
func (o *Permisision) SetRoles(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Role) error {
	query := "delete from \"roles_permisssions\" where \"permission_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeRolesFromPermissionPermisisionsSlice(o, related)
	if o.R != nil {
		o.R.Roles = nil
	}

	return o.AddRoles(ctx, exec, insert, related...)
}

// RemoveRoles relationships from objects passed in.
// Removes related items from R.Roles (uses pointer comparison, removal does not keep order)
// Sets related.R.PermissionPermisisions.
func (o *Permisision) RemoveRoles(ctx context.Context, exec boil.ContextExecutor, related ...*Role) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"roles_permisssions\" where \"permission_id\" = $1 and \"role_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeRolesFromPermissionPermisisionsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Roles {
			if rel != ri {
				continue
			}

			ln := len(o.R.Roles)
			if ln > 1 && i < ln-1 {
				o.R.Roles[i] = o.R.Roles[ln-1]
			}
			o.R.Roles = o.R.Roles[:ln-1]
			break
		}
	}

	return nil
}

func removeRolesFromPermissionPermisisionsSlice(o *Permisision, related []*Role) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.PermissionPermisisions {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.PermissionPermisisions)
			if ln > 1 && i < ln-1 {
				rel.R.PermissionPermisisions[i] = rel.R.PermissionPermisisions[ln-1]
			}
			rel.R.PermissionPermisisions = rel.R.PermissionPermisisions[:ln-1]
			break
		}
	}
}

// Permisisions retrieves all the records using an executor.
func Permisisions(mods ...qm.QueryMod) permisisionQuery {
	mods = append(mods, qm.From("\"permisisions\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"permisisions\".*"})
	}

	return permisisionQuery{q}
}

// FindPermisision retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPermisision(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Permisision, error) {
	permisisionObj := &Permisision{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"permisisions\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, permisisionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: unable to select from permisisions")
	}

	if err = permisisionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return permisisionObj, err
	}

	return permisisionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Permisision) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no permisisions provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(permisisionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	permisisionInsertCacheMut.RLock()
	cache, cached := permisisionInsertCache[key]
	permisisionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			permisisionAllColumns,
			permisisionColumnsWithDefault,
			permisisionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(permisisionType, permisisionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(permisisionType, permisisionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"permisisions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"permisisions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into permisisions")
	}

	if !cached {
		permisisionInsertCacheMut.Lock()
		permisisionInsertCache[key] = cache
		permisisionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Permisision.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Permisision) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	permisisionUpdateCacheMut.RLock()
	cache, cached := permisisionUpdateCache[key]
	permisisionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			permisisionAllColumns,
			permisisionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update permisisions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"permisisions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, permisisionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(permisisionType, permisisionMapping, append(wl, permisisionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update permisisions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for permisisions")
	}

	if !cached {
		permisisionUpdateCacheMut.Lock()
		permisisionUpdateCache[key] = cache
		permisisionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q permisisionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for permisisions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for permisisions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PermisisionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), permisisionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"permisisions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, permisisionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in permisision slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all permisision")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Permisision) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("orm: no permisisions provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(permisisionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	permisisionUpsertCacheMut.RLock()
	cache, cached := permisisionUpsertCache[key]
	permisisionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			permisisionAllColumns,
			permisisionColumnsWithDefault,
			permisisionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			permisisionAllColumns,
			permisisionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert permisisions, could not build update column list")
		}

		ret := strmangle.SetComplement(permisisionAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(permisisionPrimaryKeyColumns) == 0 {
				return errors.New("orm: unable to upsert permisisions, could not build conflict column list")
			}

			conflict = make([]string, len(permisisionPrimaryKeyColumns))
			copy(conflict, permisisionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"permisisions\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(permisisionType, permisisionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(permisisionType, permisisionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert permisisions")
	}

	if !cached {
		permisisionUpsertCacheMut.Lock()
		permisisionUpsertCache[key] = cache
		permisisionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Permisision record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Permisision) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no Permisision provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), permisisionPrimaryKeyMapping)
	sql := "DELETE FROM \"permisisions\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from permisisions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for permisisions")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q permisisionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no permisisionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from permisisions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for permisisions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PermisisionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(permisisionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), permisisionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"permisisions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, permisisionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from permisision slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for permisisions")
	}

	if len(permisisionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Permisision) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPermisision(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PermisisionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PermisisionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), permisisionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"permisisions\".* FROM \"permisisions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, permisisionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in PermisisionSlice")
	}

	*o = slice

	return nil
}

// PermisisionExists checks if the Permisision row exists.
func PermisisionExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"permisisions\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if permisisions exists")
	}

	return exists, nil
}

// Exists checks if the Permisision row exists.
func (o *Permisision) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PermisisionExists(ctx, exec, o.ID)
}
