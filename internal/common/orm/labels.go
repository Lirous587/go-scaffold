// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// Label is an object representing the database table.
type Label struct {
	ID          int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name        string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Description null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`

	R *labelR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L labelL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var LabelColumns = struct {
	ID          string
	Name        string
	Description string
}{
	ID:          "id",
	Name:        "name",
	Description: "description",
}

var LabelTableColumns = struct {
	ID          string
	Name        string
	Description string
}{
	ID:          "labels.id",
	Name:        "labels.name",
	Description: "labels.description",
}

// Generated where

var LabelWhere = struct {
	ID          whereHelperint64
	Name        whereHelperstring
	Description whereHelpernull_String
}{
	ID:          whereHelperint64{field: "\"labels\".\"id\""},
	Name:        whereHelperstring{field: "\"labels\".\"name\""},
	Description: whereHelpernull_String{field: "\"labels\".\"description\""},
}

// LabelRels is where relationship names are stored.
var LabelRels = struct {
	Articles string
}{
	Articles: "Articles",
}

// labelR is where relationships are stored.
type labelR struct {
	Articles ArticleSlice `boil:"Articles" json:"Articles" toml:"Articles" yaml:"Articles"`
}

// NewStruct creates a new relationship struct
func (*labelR) NewStruct() *labelR {
	return &labelR{}
}

func (o *Label) GetArticles() ArticleSlice {
	if o == nil {
		return nil
	}

	return o.R.GetArticles()
}

func (r *labelR) GetArticles() ArticleSlice {
	if r == nil {
		return nil
	}

	return r.Articles
}

// labelL is where Load methods for each relationship are stored.
type labelL struct{}

var (
	labelAllColumns            = []string{"id", "name", "description"}
	labelColumnsWithoutDefault = []string{"name"}
	labelColumnsWithDefault    = []string{"id", "description"}
	labelPrimaryKeyColumns     = []string{"id"}
	labelGeneratedColumns      = []string{}
)

type (
	// LabelSlice is an alias for a slice of pointers to Label.
	// This should almost always be used instead of []Label.
	LabelSlice []*Label
	// LabelHook is the signature for custom Label hook methods
	LabelHook func(boil.Executor, *Label) error

	labelQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	labelType                 = reflect.TypeOf(&Label{})
	labelMapping              = queries.MakeStructMapping(labelType)
	labelPrimaryKeyMapping, _ = queries.BindMapping(labelType, labelMapping, labelPrimaryKeyColumns)
	labelInsertCacheMut       sync.RWMutex
	labelInsertCache          = make(map[string]insertCache)
	labelUpdateCacheMut       sync.RWMutex
	labelUpdateCache          = make(map[string]updateCache)
	labelUpsertCacheMut       sync.RWMutex
	labelUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var labelAfterSelectMu sync.Mutex
var labelAfterSelectHooks []LabelHook

var labelBeforeInsertMu sync.Mutex
var labelBeforeInsertHooks []LabelHook
var labelAfterInsertMu sync.Mutex
var labelAfterInsertHooks []LabelHook

var labelBeforeUpdateMu sync.Mutex
var labelBeforeUpdateHooks []LabelHook
var labelAfterUpdateMu sync.Mutex
var labelAfterUpdateHooks []LabelHook

var labelBeforeDeleteMu sync.Mutex
var labelBeforeDeleteHooks []LabelHook
var labelAfterDeleteMu sync.Mutex
var labelAfterDeleteHooks []LabelHook

var labelBeforeUpsertMu sync.Mutex
var labelBeforeUpsertHooks []LabelHook
var labelAfterUpsertMu sync.Mutex
var labelAfterUpsertHooks []LabelHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Label) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range labelAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Label) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range labelBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Label) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range labelAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Label) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range labelBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Label) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range labelAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Label) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range labelBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Label) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range labelAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Label) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range labelBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Label) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range labelAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddLabelHook registers your hook function for all future operations.
func AddLabelHook(hookPoint boil.HookPoint, labelHook LabelHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		labelAfterSelectMu.Lock()
		labelAfterSelectHooks = append(labelAfterSelectHooks, labelHook)
		labelAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		labelBeforeInsertMu.Lock()
		labelBeforeInsertHooks = append(labelBeforeInsertHooks, labelHook)
		labelBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		labelAfterInsertMu.Lock()
		labelAfterInsertHooks = append(labelAfterInsertHooks, labelHook)
		labelAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		labelBeforeUpdateMu.Lock()
		labelBeforeUpdateHooks = append(labelBeforeUpdateHooks, labelHook)
		labelBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		labelAfterUpdateMu.Lock()
		labelAfterUpdateHooks = append(labelAfterUpdateHooks, labelHook)
		labelAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		labelBeforeDeleteMu.Lock()
		labelBeforeDeleteHooks = append(labelBeforeDeleteHooks, labelHook)
		labelBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		labelAfterDeleteMu.Lock()
		labelAfterDeleteHooks = append(labelAfterDeleteHooks, labelHook)
		labelAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		labelBeforeUpsertMu.Lock()
		labelBeforeUpsertHooks = append(labelBeforeUpsertHooks, labelHook)
		labelBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		labelAfterUpsertMu.Lock()
		labelAfterUpsertHooks = append(labelAfterUpsertHooks, labelHook)
		labelAfterUpsertMu.Unlock()
	}
}

// OneG returns a single label record from the query using the global executor.
func (q labelQuery) OneG() (*Label, error) {
	return q.One(boil.GetDB())
}

// One returns a single label record from the query.
func (q labelQuery) One(exec boil.Executor) (*Label, error) {
	o := &Label{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: failed to execute a one query for labels")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Label records from the query using the global executor.
func (q labelQuery) AllG() (LabelSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all Label records from the query.
func (q labelQuery) All(exec boil.Executor) (LabelSlice, error) {
	var o []*Label

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to Label slice")
	}

	if len(labelAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Label records in the query using the global executor
func (q labelQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all Label records in the query.
func (q labelQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count labels rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q labelQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q labelQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if labels exists")
	}

	return count > 0, nil
}

// Articles retrieves all the article's Articles with an executor.
func (o *Label) Articles(mods ...qm.QueryMod) articleQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"articles_labels\" on \"articles\".\"id\" = \"articles_labels\".\"article_id\""),
		qm.Where("\"articles_labels\".\"label_id\"=?", o.ID),
	)

	return Articles(queryMods...)
}

// LoadArticles allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (labelL) LoadArticles(e boil.Executor, singular bool, maybeLabel interface{}, mods queries.Applicator) error {
	var slice []*Label
	var object *Label

	if singular {
		var ok bool
		object, ok = maybeLabel.(*Label)
		if !ok {
			object = new(Label)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeLabel)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeLabel))
			}
		}
	} else {
		s, ok := maybeLabel.(*[]*Label)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeLabel)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeLabel))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &labelR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &labelR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.Select("\"articles\".\"id\", \"articles\".\"created_at\", \"articles\".\"updated_at\", \"articles\".\"deleted_at\", \"articles\".\"title\", \"articles\".\"description\", \"articles\".\"content\", \"articles\".\"preview_theme\", \"articles\".\"code_theme\", \"articles\".\"img_url\", \"articles\".\"visited_times\", \"articles\".\"priority\", \"a\".\"label_id\""),
		qm.From("\"articles\""),
		qm.InnerJoin("\"articles_labels\" as \"a\" on \"articles\".\"id\" = \"a\".\"article_id\""),
		qm.WhereIn("\"a\".\"label_id\" in ?", argsSlice...),
		qmhelper.WhereIsNull("\"articles\".\"deleted_at\""),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load articles")
	}

	var resultSlice []*Article

	var localJoinCols []int64
	for results.Next() {
		one := new(Article)
		var localJoinCol int64

		err = results.Scan(&one.ID, &one.CreatedAt, &one.UpdatedAt, &one.DeletedAt, &one.Title, &one.Description, &one.Content, &one.PreviewTheme, &one.CodeTheme, &one.ImgURL, &one.VisitedTimes, &one.Priority, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for articles")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice articles")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on articles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for articles")
	}

	if len(articleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Articles = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &articleR{}
			}
			foreign.R.Labels = append(foreign.R.Labels, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Articles = append(local.R.Articles, foreign)
				if foreign.R == nil {
					foreign.R = &articleR{}
				}
				foreign.R.Labels = append(foreign.R.Labels, local)
				break
			}
		}
	}

	return nil
}

// AddArticlesG adds the given related objects to the existing relationships
// of the label, optionally inserting them as new records.
// Appends related to o.R.Articles.
// Sets related.R.Labels appropriately.
// Uses the global database handle.
func (o *Label) AddArticlesG(insert bool, related ...*Article) error {
	return o.AddArticles(boil.GetDB(), insert, related...)
}

// AddArticles adds the given related objects to the existing relationships
// of the label, optionally inserting them as new records.
// Appends related to o.R.Articles.
// Sets related.R.Labels appropriately.
func (o *Label) AddArticles(exec boil.Executor, insert bool, related ...*Article) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"articles_labels\" (\"label_id\", \"article_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, query)
			fmt.Fprintln(boil.DebugWriter, values)
		}
		_, err = exec.Exec(query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &labelR{
			Articles: related,
		}
	} else {
		o.R.Articles = append(o.R.Articles, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &articleR{
				Labels: LabelSlice{o},
			}
		} else {
			rel.R.Labels = append(rel.R.Labels, o)
		}
	}
	return nil
}

// SetArticlesG removes all previously related items of the
// label replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Labels's Articles accordingly.
// Replaces o.R.Articles with related.
// Sets related.R.Labels's Articles accordingly.
// Uses the global database handle.
func (o *Label) SetArticlesG(insert bool, related ...*Article) error {
	return o.SetArticles(boil.GetDB(), insert, related...)
}

// SetArticles removes all previously related items of the
// label replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Labels's Articles accordingly.
// Replaces o.R.Articles with related.
// Sets related.R.Labels's Articles accordingly.
func (o *Label) SetArticles(exec boil.Executor, insert bool, related ...*Article) error {
	query := "delete from \"articles_labels\" where \"label_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeArticlesFromLabelsSlice(o, related)
	if o.R != nil {
		o.R.Articles = nil
	}

	return o.AddArticles(exec, insert, related...)
}

// RemoveArticlesG relationships from objects passed in.
// Removes related items from R.Articles (uses pointer comparison, removal does not keep order)
// Sets related.R.Labels.
// Uses the global database handle.
func (o *Label) RemoveArticlesG(related ...*Article) error {
	return o.RemoveArticles(boil.GetDB(), related...)
}

// RemoveArticles relationships from objects passed in.
// Removes related items from R.Articles (uses pointer comparison, removal does not keep order)
// Sets related.R.Labels.
func (o *Label) RemoveArticles(exec boil.Executor, related ...*Article) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"articles_labels\" where \"label_id\" = $1 and \"article_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err = exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeArticlesFromLabelsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Articles {
			if rel != ri {
				continue
			}

			ln := len(o.R.Articles)
			if ln > 1 && i < ln-1 {
				o.R.Articles[i] = o.R.Articles[ln-1]
			}
			o.R.Articles = o.R.Articles[:ln-1]
			break
		}
	}

	return nil
}

func removeArticlesFromLabelsSlice(o *Label, related []*Article) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Labels {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Labels)
			if ln > 1 && i < ln-1 {
				rel.R.Labels[i] = rel.R.Labels[ln-1]
			}
			rel.R.Labels = rel.R.Labels[:ln-1]
			break
		}
	}
}

// Labels retrieves all the records using an executor.
func Labels(mods ...qm.QueryMod) labelQuery {
	mods = append(mods, qm.From("\"labels\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"labels\".*"})
	}

	return labelQuery{q}
}

// FindLabelG retrieves a single record by ID.
func FindLabelG(iD int64, selectCols ...string) (*Label, error) {
	return FindLabel(boil.GetDB(), iD, selectCols...)
}

// FindLabel retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindLabel(exec boil.Executor, iD int64, selectCols ...string) (*Label, error) {
	labelObj := &Label{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"labels\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, labelObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: unable to select from labels")
	}

	if err = labelObj.doAfterSelectHooks(exec); err != nil {
		return labelObj, err
	}

	return labelObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Label) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Label) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no labels provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(labelColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	labelInsertCacheMut.RLock()
	cache, cached := labelInsertCache[key]
	labelInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			labelAllColumns,
			labelColumnsWithDefault,
			labelColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(labelType, labelMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(labelType, labelMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"labels\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"labels\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into labels")
	}

	if !cached {
		labelInsertCacheMut.Lock()
		labelInsertCache[key] = cache
		labelInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Label record using the global executor.
// See Update for more documentation.
func (o *Label) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the Label.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Label) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	labelUpdateCacheMut.RLock()
	cache, cached := labelUpdateCache[key]
	labelUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			labelAllColumns,
			labelPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update labels, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"labels\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, labelPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(labelType, labelMapping, append(wl, labelPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update labels row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for labels")
	}

	if !cached {
		labelUpdateCacheMut.Lock()
		labelUpdateCache[key] = cache
		labelUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q labelQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q labelQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for labels")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for labels")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o LabelSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o LabelSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), labelPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"labels\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, labelPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in label slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all label")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Label) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Label) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("orm: no labels provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(labelColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	labelUpsertCacheMut.RLock()
	cache, cached := labelUpsertCache[key]
	labelUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			labelAllColumns,
			labelColumnsWithDefault,
			labelColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			labelAllColumns,
			labelPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert labels, could not build update column list")
		}

		ret := strmangle.SetComplement(labelAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(labelPrimaryKeyColumns) == 0 {
				return errors.New("orm: unable to upsert labels, could not build conflict column list")
			}

			conflict = make([]string, len(labelPrimaryKeyColumns))
			copy(conflict, labelPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"labels\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(labelType, labelMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(labelType, labelMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert labels")
	}

	if !cached {
		labelUpsertCacheMut.Lock()
		labelUpsertCache[key] = cache
		labelUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single Label record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Label) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single Label record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Label) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no Label provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), labelPrimaryKeyMapping)
	sql := "DELETE FROM \"labels\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from labels")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for labels")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q labelQuery) DeleteAllG() (int64, error) {
	return q.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all matching rows.
func (q labelQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no labelQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from labels")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for labels")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o LabelSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o LabelSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(labelBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), labelPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"labels\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, labelPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from label slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for labels")
	}

	if len(labelAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Label) ReloadG() error {
	if o == nil {
		return errors.New("orm: no Label provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Label) Reload(exec boil.Executor) error {
	ret, err := FindLabel(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *LabelSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("orm: empty LabelSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *LabelSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := LabelSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), labelPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"labels\".* FROM \"labels\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, labelPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in LabelSlice")
	}

	*o = slice

	return nil
}

// LabelExistsG checks if the Label row exists.
func LabelExistsG(iD int64) (bool, error) {
	return LabelExists(boil.GetDB(), iD)
}

// LabelExists checks if the Label row exists.
func LabelExists(exec boil.Executor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"labels\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if labels exists")
	}

	return exists, nil
}

// Exists checks if the Label row exists.
func (o *Label) Exists(exec boil.Executor) (bool, error) {
	return LabelExists(exec, o.ID)
}
