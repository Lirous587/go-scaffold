// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// Test is an object representing the database table.
type Test struct {
	ID          int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Title       string      `boil:"title" json:"title" toml:"title" yaml:"title"`
	Description null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	CreatedAt   time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt   time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt   null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *testR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L testL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TestColumns = struct {
	ID          string
	Title       string
	Description string
	CreatedAt   string
	UpdatedAt   string
	DeletedAt   string
}{
	ID:          "id",
	Title:       "title",
	Description: "description",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
	DeletedAt:   "deleted_at",
}

var TestTableColumns = struct {
	ID          string
	Title       string
	Description string
	CreatedAt   string
	UpdatedAt   string
	DeletedAt   string
}{
	ID:          "test.id",
	Title:       "test.title",
	Description: "test.description",
	CreatedAt:   "test.created_at",
	UpdatedAt:   "test.updated_at",
	DeletedAt:   "test.deleted_at",
}

// Generated where

var TestWhere = struct {
	ID          whereHelperint64
	Title       whereHelperstring
	Description whereHelpernull_String
	CreatedAt   whereHelpertime_Time
	UpdatedAt   whereHelpertime_Time
	DeletedAt   whereHelpernull_Time
}{
	ID:          whereHelperint64{field: "\"test\".\"id\""},
	Title:       whereHelperstring{field: "\"test\".\"title\""},
	Description: whereHelpernull_String{field: "\"test\".\"description\""},
	CreatedAt:   whereHelpertime_Time{field: "\"test\".\"created_at\""},
	UpdatedAt:   whereHelpertime_Time{field: "\"test\".\"updated_at\""},
	DeletedAt:   whereHelpernull_Time{field: "\"test\".\"deleted_at\""},
}

// TestRels is where relationship names are stored.
var TestRels = struct {
}{}

// testR is where relationships are stored.
type testR struct {
}

// NewStruct creates a new relationship struct
func (*testR) NewStruct() *testR {
	return &testR{}
}

// testL is where Load methods for each relationship are stored.
type testL struct{}

var (
	testAllColumns            = []string{"id", "title", "description", "created_at", "updated_at", "deleted_at"}
	testColumnsWithoutDefault = []string{"title", "created_at", "updated_at"}
	testColumnsWithDefault    = []string{"id", "description", "deleted_at"}
	testPrimaryKeyColumns     = []string{"id"}
	testGeneratedColumns      = []string{}
)

type (
	// TestSlice is an alias for a slice of pointers to Test.
	// This should almost always be used instead of []Test.
	TestSlice []*Test
	// TestHook is the signature for custom Test hook methods
	TestHook func(boil.Executor, *Test) error

	testQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	testType                 = reflect.TypeOf(&Test{})
	testMapping              = queries.MakeStructMapping(testType)
	testPrimaryKeyMapping, _ = queries.BindMapping(testType, testMapping, testPrimaryKeyColumns)
	testInsertCacheMut       sync.RWMutex
	testInsertCache          = make(map[string]insertCache)
	testUpdateCacheMut       sync.RWMutex
	testUpdateCache          = make(map[string]updateCache)
	testUpsertCacheMut       sync.RWMutex
	testUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var testAfterSelectMu sync.Mutex
var testAfterSelectHooks []TestHook

var testBeforeInsertMu sync.Mutex
var testBeforeInsertHooks []TestHook
var testAfterInsertMu sync.Mutex
var testAfterInsertHooks []TestHook

var testBeforeUpdateMu sync.Mutex
var testBeforeUpdateHooks []TestHook
var testAfterUpdateMu sync.Mutex
var testAfterUpdateHooks []TestHook

var testBeforeDeleteMu sync.Mutex
var testBeforeDeleteHooks []TestHook
var testAfterDeleteMu sync.Mutex
var testAfterDeleteHooks []TestHook

var testBeforeUpsertMu sync.Mutex
var testBeforeUpsertHooks []TestHook
var testAfterUpsertMu sync.Mutex
var testAfterUpsertHooks []TestHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Test) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range testAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Test) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range testBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Test) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range testAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Test) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range testBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Test) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range testAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Test) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range testBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Test) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range testAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Test) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range testBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Test) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range testAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTestHook registers your hook function for all future operations.
func AddTestHook(hookPoint boil.HookPoint, testHook TestHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		testAfterSelectMu.Lock()
		testAfterSelectHooks = append(testAfterSelectHooks, testHook)
		testAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		testBeforeInsertMu.Lock()
		testBeforeInsertHooks = append(testBeforeInsertHooks, testHook)
		testBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		testAfterInsertMu.Lock()
		testAfterInsertHooks = append(testAfterInsertHooks, testHook)
		testAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		testBeforeUpdateMu.Lock()
		testBeforeUpdateHooks = append(testBeforeUpdateHooks, testHook)
		testBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		testAfterUpdateMu.Lock()
		testAfterUpdateHooks = append(testAfterUpdateHooks, testHook)
		testAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		testBeforeDeleteMu.Lock()
		testBeforeDeleteHooks = append(testBeforeDeleteHooks, testHook)
		testBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		testAfterDeleteMu.Lock()
		testAfterDeleteHooks = append(testAfterDeleteHooks, testHook)
		testAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		testBeforeUpsertMu.Lock()
		testBeforeUpsertHooks = append(testBeforeUpsertHooks, testHook)
		testBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		testAfterUpsertMu.Lock()
		testAfterUpsertHooks = append(testAfterUpsertHooks, testHook)
		testAfterUpsertMu.Unlock()
	}
}

// OneG returns a single test record from the query using the global executor.
func (q testQuery) OneG() (*Test, error) {
	return q.One(boil.GetDB())
}

// One returns a single test record from the query.
func (q testQuery) One(exec boil.Executor) (*Test, error) {
	o := &Test{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: failed to execute a one query for test")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Test records from the query using the global executor.
func (q testQuery) AllG() (TestSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all Test records from the query.
func (q testQuery) All(exec boil.Executor) (TestSlice, error) {
	var o []*Test

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to Test slice")
	}

	if len(testAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Test records in the query using the global executor
func (q testQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all Test records in the query.
func (q testQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count test rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q testQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q testQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if test exists")
	}

	return count > 0, nil
}

// Tests retrieves all the records using an executor.
func Tests(mods ...qm.QueryMod) testQuery {
	mods = append(mods, qm.From("\"test\""), qmhelper.WhereIsNull("\"test\".\"deleted_at\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"test\".*"})
	}

	return testQuery{q}
}

// FindTestG retrieves a single record by ID.
func FindTestG(iD int64, selectCols ...string) (*Test, error) {
	return FindTest(boil.GetDB(), iD, selectCols...)
}

// FindTest retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTest(exec boil.Executor, iD int64, selectCols ...string) (*Test, error) {
	testObj := &Test{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"test\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, testObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: unable to select from test")
	}

	if err = testObj.doAfterSelectHooks(exec); err != nil {
		return testObj, err
	}

	return testObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Test) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Test) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no test provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(testColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	testInsertCacheMut.RLock()
	cache, cached := testInsertCache[key]
	testInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			testAllColumns,
			testColumnsWithDefault,
			testColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(testType, testMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(testType, testMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"test\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"test\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into test")
	}

	if !cached {
		testInsertCacheMut.Lock()
		testInsertCache[key] = cache
		testInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Test record using the global executor.
// See Update for more documentation.
func (o *Test) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the Test.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Test) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	testUpdateCacheMut.RLock()
	cache, cached := testUpdateCache[key]
	testUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			testAllColumns,
			testPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update test, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"test\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, testPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(testType, testMapping, append(wl, testPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update test row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for test")
	}

	if !cached {
		testUpdateCacheMut.Lock()
		testUpdateCache[key] = cache
		testUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q testQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q testQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for test")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for test")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o TestSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TestSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), testPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"test\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, testPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in test slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all test")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Test) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Test) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("orm: no test provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(testColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	testUpsertCacheMut.RLock()
	cache, cached := testUpsertCache[key]
	testUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			testAllColumns,
			testColumnsWithDefault,
			testColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			testAllColumns,
			testPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert test, could not build update column list")
		}

		ret := strmangle.SetComplement(testAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(testPrimaryKeyColumns) == 0 {
				return errors.New("orm: unable to upsert test, could not build conflict column list")
			}

			conflict = make([]string, len(testPrimaryKeyColumns))
			copy(conflict, testPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"test\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(testType, testMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(testType, testMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert test")
	}

	if !cached {
		testUpsertCacheMut.Lock()
		testUpsertCache[key] = cache
		testUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single Test record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Test) DeleteG(hardDelete bool) (int64, error) {
	return o.Delete(boil.GetDB(), hardDelete)
}

// Delete deletes a single Test record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Test) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no Test provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), testPrimaryKeyMapping)
		sql = "DELETE FROM \"test\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"test\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(testType, testMapping, append(wl, testPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from test")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for test")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q testQuery) DeleteAllG(hardDelete bool) (int64, error) {
	return q.DeleteAll(boil.GetDB(), hardDelete)
}

// DeleteAll deletes all matching rows.
func (q testQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no testQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from test")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for test")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o TestSlice) DeleteAllG(hardDelete bool) (int64, error) {
	return o.DeleteAll(boil.GetDB(), hardDelete)
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TestSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(testBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), testPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"test\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, testPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), testPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"test\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, testPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from test slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for test")
	}

	if len(testAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Test) ReloadG() error {
	if o == nil {
		return errors.New("orm: no Test provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Test) Reload(exec boil.Executor) error {
	ret, err := FindTest(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TestSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("orm: empty TestSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TestSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TestSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), testPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"test\".* FROM \"test\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, testPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in TestSlice")
	}

	*o = slice

	return nil
}

// TestExistsG checks if the Test row exists.
func TestExistsG(iD int64) (bool, error) {
	return TestExists(boil.GetDB(), iD)
}

// TestExists checks if the Test row exists.
func TestExists(exec boil.Executor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"test\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if test exists")
	}

	return exists, nil
}

// Exists checks if the Test row exists.
func (o *Test) Exists(exec boil.Executor) (bool, error) {
	return TestExists(exec, o.ID)
}
