// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// Lisu is an object representing the database table.
type Lisu struct {
	ID          int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Title       string      `boil:"title" json:"title" toml:"title" yaml:"title"`
	Description null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	CreatedAt   time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt   time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt   null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *lisuR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L lisuL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var LisuColumns = struct {
	ID          string
	Title       string
	Description string
	CreatedAt   string
	UpdatedAt   string
	DeletedAt   string
}{
	ID:          "id",
	Title:       "title",
	Description: "description",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
	DeletedAt:   "deleted_at",
}

var LisuTableColumns = struct {
	ID          string
	Title       string
	Description string
	CreatedAt   string
	UpdatedAt   string
	DeletedAt   string
}{
	ID:          "lisu.id",
	Title:       "lisu.title",
	Description: "lisu.description",
	CreatedAt:   "lisu.created_at",
	UpdatedAt:   "lisu.updated_at",
	DeletedAt:   "lisu.deleted_at",
}

// Generated where

var LisuWhere = struct {
	ID          whereHelperint64
	Title       whereHelperstring
	Description whereHelpernull_String
	CreatedAt   whereHelpertime_Time
	UpdatedAt   whereHelpertime_Time
	DeletedAt   whereHelpernull_Time
}{
	ID:          whereHelperint64{field: "\"lisu\".\"id\""},
	Title:       whereHelperstring{field: "\"lisu\".\"title\""},
	Description: whereHelpernull_String{field: "\"lisu\".\"description\""},
	CreatedAt:   whereHelpertime_Time{field: "\"lisu\".\"created_at\""},
	UpdatedAt:   whereHelpertime_Time{field: "\"lisu\".\"updated_at\""},
	DeletedAt:   whereHelpernull_Time{field: "\"lisu\".\"deleted_at\""},
}

// LisuRels is where relationship names are stored.
var LisuRels = struct {
}{}

// lisuR is where relationships are stored.
type lisuR struct {
}

// NewStruct creates a new relationship struct
func (*lisuR) NewStruct() *lisuR {
	return &lisuR{}
}

// lisuL is where Load methods for each relationship are stored.
type lisuL struct{}

var (
	lisuAllColumns            = []string{"id", "title", "description", "created_at", "updated_at", "deleted_at"}
	lisuColumnsWithoutDefault = []string{"title", "created_at", "updated_at"}
	lisuColumnsWithDefault    = []string{"id", "description", "deleted_at"}
	lisuPrimaryKeyColumns     = []string{"id"}
	lisuGeneratedColumns      = []string{}
)

type (
	// LisuSlice is an alias for a slice of pointers to Lisu.
	// This should almost always be used instead of []Lisu.
	LisuSlice []*Lisu
	// LisuHook is the signature for custom Lisu hook methods
	LisuHook func(boil.Executor, *Lisu) error

	lisuQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	lisuType                 = reflect.TypeOf(&Lisu{})
	lisuMapping              = queries.MakeStructMapping(lisuType)
	lisuPrimaryKeyMapping, _ = queries.BindMapping(lisuType, lisuMapping, lisuPrimaryKeyColumns)
	lisuInsertCacheMut       sync.RWMutex
	lisuInsertCache          = make(map[string]insertCache)
	lisuUpdateCacheMut       sync.RWMutex
	lisuUpdateCache          = make(map[string]updateCache)
	lisuUpsertCacheMut       sync.RWMutex
	lisuUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var lisuAfterSelectMu sync.Mutex
var lisuAfterSelectHooks []LisuHook

var lisuBeforeInsertMu sync.Mutex
var lisuBeforeInsertHooks []LisuHook
var lisuAfterInsertMu sync.Mutex
var lisuAfterInsertHooks []LisuHook

var lisuBeforeUpdateMu sync.Mutex
var lisuBeforeUpdateHooks []LisuHook
var lisuAfterUpdateMu sync.Mutex
var lisuAfterUpdateHooks []LisuHook

var lisuBeforeDeleteMu sync.Mutex
var lisuBeforeDeleteHooks []LisuHook
var lisuAfterDeleteMu sync.Mutex
var lisuAfterDeleteHooks []LisuHook

var lisuBeforeUpsertMu sync.Mutex
var lisuBeforeUpsertHooks []LisuHook
var lisuAfterUpsertMu sync.Mutex
var lisuAfterUpsertHooks []LisuHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Lisu) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range lisuAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Lisu) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range lisuBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Lisu) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range lisuAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Lisu) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range lisuBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Lisu) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range lisuAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Lisu) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range lisuBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Lisu) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range lisuAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Lisu) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range lisuBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Lisu) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range lisuAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddLisuHook registers your hook function for all future operations.
func AddLisuHook(hookPoint boil.HookPoint, lisuHook LisuHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		lisuAfterSelectMu.Lock()
		lisuAfterSelectHooks = append(lisuAfterSelectHooks, lisuHook)
		lisuAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		lisuBeforeInsertMu.Lock()
		lisuBeforeInsertHooks = append(lisuBeforeInsertHooks, lisuHook)
		lisuBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		lisuAfterInsertMu.Lock()
		lisuAfterInsertHooks = append(lisuAfterInsertHooks, lisuHook)
		lisuAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		lisuBeforeUpdateMu.Lock()
		lisuBeforeUpdateHooks = append(lisuBeforeUpdateHooks, lisuHook)
		lisuBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		lisuAfterUpdateMu.Lock()
		lisuAfterUpdateHooks = append(lisuAfterUpdateHooks, lisuHook)
		lisuAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		lisuBeforeDeleteMu.Lock()
		lisuBeforeDeleteHooks = append(lisuBeforeDeleteHooks, lisuHook)
		lisuBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		lisuAfterDeleteMu.Lock()
		lisuAfterDeleteHooks = append(lisuAfterDeleteHooks, lisuHook)
		lisuAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		lisuBeforeUpsertMu.Lock()
		lisuBeforeUpsertHooks = append(lisuBeforeUpsertHooks, lisuHook)
		lisuBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		lisuAfterUpsertMu.Lock()
		lisuAfterUpsertHooks = append(lisuAfterUpsertHooks, lisuHook)
		lisuAfterUpsertMu.Unlock()
	}
}

// OneG returns a single lisu record from the query using the global executor.
func (q lisuQuery) OneG() (*Lisu, error) {
	return q.One(boil.GetDB())
}

// One returns a single lisu record from the query.
func (q lisuQuery) One(exec boil.Executor) (*Lisu, error) {
	o := &Lisu{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: failed to execute a one query for lisu")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Lisu records from the query using the global executor.
func (q lisuQuery) AllG() (LisuSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all Lisu records from the query.
func (q lisuQuery) All(exec boil.Executor) (LisuSlice, error) {
	var o []*Lisu

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to Lisu slice")
	}

	if len(lisuAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Lisu records in the query using the global executor
func (q lisuQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all Lisu records in the query.
func (q lisuQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count lisu rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q lisuQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q lisuQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if lisu exists")
	}

	return count > 0, nil
}

// Lisus retrieves all the records using an executor.
func Lisus(mods ...qm.QueryMod) lisuQuery {
	mods = append(mods, qm.From("\"lisu\""), qmhelper.WhereIsNull("\"lisu\".\"deleted_at\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"lisu\".*"})
	}

	return lisuQuery{q}
}

// FindLisuG retrieves a single record by ID.
func FindLisuG(iD int64, selectCols ...string) (*Lisu, error) {
	return FindLisu(boil.GetDB(), iD, selectCols...)
}

// FindLisu retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindLisu(exec boil.Executor, iD int64, selectCols ...string) (*Lisu, error) {
	lisuObj := &Lisu{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"lisu\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, lisuObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: unable to select from lisu")
	}

	if err = lisuObj.doAfterSelectHooks(exec); err != nil {
		return lisuObj, err
	}

	return lisuObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Lisu) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Lisu) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no lisu provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(lisuColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	lisuInsertCacheMut.RLock()
	cache, cached := lisuInsertCache[key]
	lisuInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			lisuAllColumns,
			lisuColumnsWithDefault,
			lisuColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(lisuType, lisuMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(lisuType, lisuMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"lisu\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"lisu\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into lisu")
	}

	if !cached {
		lisuInsertCacheMut.Lock()
		lisuInsertCache[key] = cache
		lisuInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Lisu record using the global executor.
// See Update for more documentation.
func (o *Lisu) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the Lisu.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Lisu) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	lisuUpdateCacheMut.RLock()
	cache, cached := lisuUpdateCache[key]
	lisuUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			lisuAllColumns,
			lisuPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update lisu, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"lisu\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, lisuPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(lisuType, lisuMapping, append(wl, lisuPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update lisu row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for lisu")
	}

	if !cached {
		lisuUpdateCacheMut.Lock()
		lisuUpdateCache[key] = cache
		lisuUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q lisuQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q lisuQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for lisu")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for lisu")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o LisuSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o LisuSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), lisuPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"lisu\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, lisuPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in lisu slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all lisu")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Lisu) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Lisu) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("orm: no lisu provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(lisuColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	lisuUpsertCacheMut.RLock()
	cache, cached := lisuUpsertCache[key]
	lisuUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			lisuAllColumns,
			lisuColumnsWithDefault,
			lisuColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			lisuAllColumns,
			lisuPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert lisu, could not build update column list")
		}

		ret := strmangle.SetComplement(lisuAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(lisuPrimaryKeyColumns) == 0 {
				return errors.New("orm: unable to upsert lisu, could not build conflict column list")
			}

			conflict = make([]string, len(lisuPrimaryKeyColumns))
			copy(conflict, lisuPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"lisu\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(lisuType, lisuMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(lisuType, lisuMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert lisu")
	}

	if !cached {
		lisuUpsertCacheMut.Lock()
		lisuUpsertCache[key] = cache
		lisuUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single Lisu record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Lisu) DeleteG(hardDelete bool) (int64, error) {
	return o.Delete(boil.GetDB(), hardDelete)
}

// Delete deletes a single Lisu record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Lisu) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no Lisu provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), lisuPrimaryKeyMapping)
		sql = "DELETE FROM \"lisu\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"lisu\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(lisuType, lisuMapping, append(wl, lisuPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from lisu")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for lisu")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q lisuQuery) DeleteAllG(hardDelete bool) (int64, error) {
	return q.DeleteAll(boil.GetDB(), hardDelete)
}

// DeleteAll deletes all matching rows.
func (q lisuQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no lisuQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from lisu")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for lisu")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o LisuSlice) DeleteAllG(hardDelete bool) (int64, error) {
	return o.DeleteAll(boil.GetDB(), hardDelete)
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o LisuSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(lisuBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), lisuPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"lisu\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, lisuPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), lisuPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"lisu\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, lisuPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from lisu slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for lisu")
	}

	if len(lisuAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Lisu) ReloadG() error {
	if o == nil {
		return errors.New("orm: no Lisu provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Lisu) Reload(exec boil.Executor) error {
	ret, err := FindLisu(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *LisuSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("orm: empty LisuSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *LisuSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := LisuSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), lisuPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"lisu\".* FROM \"lisu\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, lisuPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in LisuSlice")
	}

	*o = slice

	return nil
}

// LisuExistsG checks if the Lisu row exists.
func LisuExistsG(iD int64) (bool, error) {
	return LisuExists(boil.GetDB(), iD)
}

// LisuExists checks if the Lisu row exists.
func LisuExists(exec boil.Executor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"lisu\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if lisu exists")
	}

	return exists, nil
}

// Exists checks if the Lisu row exists.
func (o *Lisu) Exists(exec boil.Executor) (bool, error) {
	return LisuExists(exec, o.ID)
}
